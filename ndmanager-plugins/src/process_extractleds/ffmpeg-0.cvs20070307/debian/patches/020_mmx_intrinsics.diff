Index: ffmpeg-0.cvs20060724/libavcodec/Makefile
===================================================================
--- ffmpeg-0.cvs20060724.orig/libavcodec/Makefile	2006-07-24 17:11:20.000000000 +0200
+++ ffmpeg-0.cvs20060724/libavcodec/Makefile	2006-07-24 17:22:05.000000000 +0200
@@ -285,6 +285,8 @@
 	i386/idct_mmx.o i386/motion_est_mmx.o \
 	i386/simple_idct_mmx.o i386/fft_sse.o i386/vp3dsp_mmx.o \
 	i386/vp3dsp_sse2.o i386/fft_3dn.o i386/fft_3dn2.o i386/snowdsp_mmx.o
+i386/dsputil_mmx.o: CFLAGS+= -mmmx
+depend: CFLAGS+= -mmmx
 ifeq ($(CONFIG_GPL),yes)
 OBJS += i386/idct_mmx_xvid.o
 endif
Index: ffmpeg-0.cvs20060724/libavcodec/i386/dsputil_mmx.c
===================================================================
--- ffmpeg-0.cvs20060724.orig/libavcodec/i386/dsputil_mmx.c	2006-07-24 17:11:16.000000000 +0200
+++ ffmpeg-0.cvs20060724/libavcodec/i386/dsputil_mmx.c	2006-07-24 17:22:05.000000000 +0200
@@ -26,6 +26,8 @@
 #include "x86_cpu.h"
 #include "mmx.h"
 
+#include <mmintrin.h>
+
 //#undef NDEBUG
 //#include <assert.h>
 
@@ -624,32 +626,22 @@
 }
 
 static inline void transpose4x4(uint8_t *dst, uint8_t *src, int dst_stride, int src_stride){
-    asm volatile( //FIXME could save 1 instruction if done as 8x4 ...
-        "movd  %4, %%mm0                \n\t"
-        "movd  %5, %%mm1                \n\t"
-        "movd  %6, %%mm2                \n\t"
-        "movd  %7, %%mm3                \n\t"
-        "punpcklbw %%mm1, %%mm0         \n\t"
-        "punpcklbw %%mm3, %%mm2         \n\t"
-        "movq %%mm0, %%mm1              \n\t"
-        "punpcklwd %%mm2, %%mm0         \n\t"
-        "punpckhwd %%mm2, %%mm1         \n\t"
-        "movd  %%mm0, %0                \n\t"
-        "punpckhdq %%mm0, %%mm0         \n\t"
-        "movd  %%mm0, %1                \n\t"
-        "movd  %%mm1, %2                \n\t"
-        "punpckhdq %%mm1, %%mm1         \n\t"
-        "movd  %%mm1, %3                \n\t"
-
-        : "=m" (*(uint32_t*)(dst + 0*dst_stride)),
-          "=m" (*(uint32_t*)(dst + 1*dst_stride)),
-          "=m" (*(uint32_t*)(dst + 2*dst_stride)),
-          "=m" (*(uint32_t*)(dst + 3*dst_stride))
-        :  "m" (*(uint32_t*)(src + 0*src_stride)),
-           "m" (*(uint32_t*)(src + 1*src_stride)),
-           "m" (*(uint32_t*)(src + 2*src_stride)),
-           "m" (*(uint32_t*)(src + 3*src_stride))
-    );
+    __v8qi mm0, mm1, mm2, mm3;
+    mm0 = (__v8qi)(uint64_t)*(uint32_t*)(src + 0*src_stride);
+    mm1 = (__v8qi)(uint64_t)*(uint32_t*)(src + 1*src_stride);
+    mm2 = (__v8qi)(uint64_t)*(uint32_t*)(src + 2*src_stride);
+    mm3 = (__v8qi)(uint64_t)*(uint32_t*)(src + 3*src_stride);
+    mm0 = __builtin_ia32_punpcklbw(mm1, mm0);
+    mm2 = __builtin_ia32_punpcklbw(mm3, mm2);
+    mm1 = mm0;
+    mm0 = __builtin_ia32_punpckhwd(mm2, mm0);
+    mm1 = __builtin_ia32_punpckhwd(mm2, mm1);
+    *(uint32_t*)(dst + 0*dst_stride) = (uint64_t)mm0;
+    mm0 = __builtin_ia32_punpckhdq(mm0, mm0);
+    *(uint32_t*)(dst + 1*dst_stride) = (uint64_t)mm0;
+    *(uint32_t*)(dst + 2*dst_stride) = (uint64_t)mm1;
+    mm1 = __builtin_ia32_punpckhdq(mm1, mm1);
+    *(uint32_t*)(dst + 3*dst_stride) = (uint64_t)mm1;
 }
 
 static void h263_h_loop_filter_mmx(uint8_t *src, int stride, int qscale){
